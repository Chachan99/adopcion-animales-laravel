<?php
/**
 * Script Simplificado para Verificar Conexi√≥n a S3
 * No requiere bootstrap completo de Laravel
 */

echo "=== VERIFICACI√ìN SIMPLE DE S3 ===\n\n";

// 1. Verificar archivo .env
echo "1. VERIFICANDO ARCHIVO .env:\n";

$envFile = __DIR__ . '/.env';
$envContent = '';

if (file_exists($envFile)) {
    $envContent = file_get_contents($envFile);
    echo "   - Archivo .env encontrado ‚úì\n";
    
    // Buscar configuraciones S3
    $s3Vars = [
        'FILESYSTEM_DISK' => 'Disco del sistema de archivos',
        'AWS_ACCESS_KEY_ID' => 'ID de clave de acceso AWS',
        'AWS_SECRET_ACCESS_KEY' => 'Clave secreta AWS',
        'AWS_DEFAULT_REGION' => 'Regi√≥n AWS',
        'AWS_BUCKET' => 'Bucket S3',
        'AWS_URL' => 'URL base S3'
    ];
    
    foreach ($s3Vars as $var => $desc) {
        if (preg_match("/^$var=(.+)$/m", $envContent, $matches)) {
            $value = trim($matches[1]);
            if (!empty($value) && $value !== 'null') {
                echo "   - $var: Configurado ‚úì\n";
                if ($var === 'FILESYSTEM_DISK') {
                    echo "     Valor: $value\n";
                }
            } else {
                echo "   - $var: NO configurado ‚úó\n";
            }
        } else {
            echo "   - $var: NO encontrado ‚úó\n";
        }
    }
} else {
    echo "   - Archivo .env NO encontrado ‚úó\n";
}

echo "\n";

// 2. Verificar archivo .env.render (si existe)
echo "2. VERIFICANDO ARCHIVO .env.render:\n";

$envRenderFile = __DIR__ . '/.env.render';
if (file_exists($envRenderFile)) {
    $envRenderContent = file_get_contents($envRenderFile);
    echo "   - Archivo .env.render encontrado ‚úì\n";
    
    foreach ($s3Vars as $var => $desc) {
        if (preg_match("/^$var=(.+)$/m", $envRenderContent, $matches)) {
            $value = trim($matches[1]);
            if (!empty($value) && $value !== 'null') {
                echo "   - $var: Configurado ‚úì\n";
            } else {
                echo "   - $var: NO configurado ‚úó\n";
            }
        } else {
            echo "   - $var: NO encontrado ‚úó\n";
        }
    }
} else {
    echo "   - Archivo .env.render NO encontrado (normal si no usas este archivo)\n";
}

echo "\n";

// 3. Verificar configuraci√≥n de filesystems.php
echo "3. VERIFICANDO CONFIGURACI√ìN DE FILESYSTEMS:\n";

$filesystemsConfig = __DIR__ . '/config/filesystems.php';
if (file_exists($filesystemsConfig)) {
    $configContent = file_get_contents($filesystemsConfig);
    echo "   - Archivo config/filesystems.php encontrado ‚úì\n";
    
    // Verificar configuraci√≥n S3
    if (strpos($configContent, "'s3' => [") !== false) {
        echo "   - Configuraci√≥n S3 encontrada ‚úì\n";
    } else {
        echo "   - Configuraci√≥n S3 NO encontrada ‚úó\n";
    }
    
    // Verificar disco p√∫blico
    if (strpos($configContent, "'public' => [") !== false) {
        echo "   - Configuraci√≥n disco p√∫blico encontrada ‚úì\n";
        
        // Verificar si el disco p√∫blico usa S3
        if (preg_match("/'public'\s*=>\s*\[\s*'driver'\s*=>\s*'s3'/", $configContent)) {
            echo "   - Disco p√∫blico configurado para S3 ‚úì\n";
        } else {
            echo "   - Disco p√∫blico NO usa S3 (usa local) ‚ö†Ô∏è\n";
        }
    }
} else {
    echo "   - Archivo config/filesystems.php NO encontrado ‚úó\n";
}

echo "\n";

// 4. Verificar directorio storage
echo "4. VERIFICANDO DIRECTORIO STORAGE:\n";

$storageDir = __DIR__ . '/storage/app/public';
if (is_dir($storageDir)) {
    echo "   - Directorio storage/app/public existe ‚úì\n";
    
    // Contar archivos locales
    $localFiles = 0;
    $iterator = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($storageDir));
    foreach ($iterator as $file) {
        if ($file->isFile()) {
            $localFiles++;
        }
    }
    echo "   - Archivos en storage local: $localFiles\n";
    
    if ($localFiles > 0) {
        echo "   - ‚ö†Ô∏è  Hay archivos en storage local (deber√≠an estar en S3)\n";
    }
} else {
    echo "   - Directorio storage/app/public NO existe\n";
}

// Verificar enlace simb√≥lico public/storage
$publicStorageLink = __DIR__ . '/public/storage';
if (is_link($publicStorageLink)) {
    echo "   - Enlace simb√≥lico public/storage existe ‚úì\n";
} elseif (is_dir($publicStorageLink)) {
    echo "   - public/storage existe como directorio ‚úì\n";
} else {
    echo "   - Enlace simb√≥lico public/storage NO existe ‚úó\n";
    echo "     (Ejecuta: php artisan storage:link)\n";
}

echo "\n";

// 5. Verificar dependencias AWS
echo "5. VERIFICANDO DEPENDENCIAS AWS:\n";

$composerFile = __DIR__ . '/composer.json';
if (file_exists($composerFile)) {
    $composerContent = file_get_contents($composerFile);
    $composer = json_decode($composerContent, true);
    
    if (isset($composer['require']['aws/aws-sdk-php'])) {
        echo "   - AWS SDK instalado ‚úì\n";
    } elseif (isset($composer['require']['league/flysystem-aws-s3-v3'])) {
        echo "   - Flysystem S3 instalado ‚úì\n";
    } else {
        echo "   - AWS SDK NO instalado ‚úó\n";
        echo "     (Ejecuta: composer require aws/aws-sdk-php)\n";
    }
} else {
    echo "   - composer.json NO encontrado ‚úó\n";
}

echo "\n";

// 6. Diagn√≥stico final
echo "6. DIAGN√ìSTICO FINAL:\n";

$isConfiguredForS3 = false;

// Verificar variables principales
if (preg_match("/^FILESYSTEM_DISK=s3$/m", $envContent)) {
    echo "   ‚úÖ FILESYSTEM_DISK configurado como 's3'\n";
    $isConfiguredForS3 = true;
} else {
    echo "   ‚ùå FILESYSTEM_DISK NO est√° configurado como 's3'\n";
}

if (preg_match("/^AWS_ACCESS_KEY_ID=.+$/m", $envContent) && 
    preg_match("/^AWS_SECRET_ACCESS_KEY=.+$/m", $envContent) && 
    preg_match("/^AWS_BUCKET=.+$/m", $envContent)) {
    echo "   ‚úÖ Credenciales AWS b√°sicas configuradas\n";
} else {
    echo "   ‚ùå Credenciales AWS incompletas\n";
    $isConfiguredForS3 = false;
}

echo "\n";

if ($isConfiguredForS3) {
    echo "üéâ RESULTADO: Tu aplicaci√≥n EST√Å configurada para S3\n";
    echo "   - Las nuevas im√°genes se guardar√°n en AWS S3\n";
    echo "   - No se perder√°n en reinicios de Render\n";
    echo "\n";
    echo "üìã PR√ìXIMOS PASOS:\n";
    echo "   1. Redespliega tu aplicaci√≥n en Render\n";
    echo "   2. Sube una imagen de prueba\n";
    echo "   3. Verifica que la URL contenga tu bucket S3\n";
    echo "   4. Las im√°genes anteriores seguir√°n en storage local\n";
} else {
    echo "‚ö†Ô∏è  RESULTADO: Tu aplicaci√≥n NO est√° configurada para S3\n";
    echo "   - A√∫n usa almacenamiento local\n";
    echo "   - Las im√°genes se perder√°n en reinicios\n";
    echo "\n";
    echo "üìã ACCIONES NECESARIAS:\n";
    echo "   1. Configura FILESYSTEM_DISK=s3 en Render\n";
    echo "   2. Configura todas las variables AWS_*\n";
    echo "   3. Redespliega la aplicaci√≥n\n";
}

echo "\n=== FIN DE LA VERIFICACI√ìN ===\n";